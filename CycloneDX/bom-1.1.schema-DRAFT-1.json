{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://cyclonedx.org/schema/bom-1.1.schema.json",
  "type": "object",
  "title": "CycloneDX Software Bill-of-Material Specification",
  "required": [
    "components",
    "version",
    "schemaVersion"
  ],
  "properties": {
    "serialNumber": {
      "$id": "#/properties/serialNumber",
      "type": "string",
      "title": "BOM Serial Number",
      "description": "Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.",
      "default": "",
      "examples": ["urn:uuid:3e671687-395b-41f5-a30f-a58921a69b79"],
      "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
    },
    "version": {
      "$id": "#/properties/version",
      "type": "integer",
      "title": "BOM Version",
      "description": "The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.",
      "default": 1,
      "examples": [1]
    },
    "schemaVersion": {
      "$id": "#/properties/schemaVersion",
      "type": "string",
      "title": "CycloneDX Schema Version",
      "description": "The version of the CycloneDX Schema a BOM is written to (starting at version 1.1)",
      "examples": ["1.1"]
    },
    "components": {
      "$id": "#/properties/components",
      "type": "array",
      "items": {"$ref": "#/definitions/component"},
      "title": "Components"
    },
    "externalReferences": {
      "$id": "#/properties/externalReferences",
      "type": "array",
      "items": {"$ref": "#/definitions/externalReference"},
      "title": "External References"
    }
  },
  "definitions": {
    "component": {
      "type": "object",
      "title": "Component Object",
      "required": [
        "type",
        "name",
        "version"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "application",
            "framework",
            "library",
            "operating-system",
            "device",
            "file"
          ],
          "title": "Component Type",
          "description": "Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.",
          "default": "",
          "examples": ["library"],
          "pattern": "^(.*)$"
        },
        "bom-ref": {
          "type": "string",
          "title": "BOM Reference",
          "description": "An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.",
          "default": "",
          "pattern": "^(.*)$"
        },
        "publisher": {
          "type": "string",
          "title": "Component Publisher",
          "description": "The person(s) or organization(s) that published the component",
          "default": "",
          "examples": ["Acme Inc"],
          "pattern": "^(.*)$"
        },
        "group": {
          "type": "string",
          "title": "Component Group",
          "description": "The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.",
          "default": "",
          "examples": ["com.acme"],
          "pattern": "^(.*)$"
        },
        "name": {
          "type": "string",
          "title": "Component Name",
          "description": "The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery",
          "default": "",
          "examples": ["tomcat-catalina"],
          "pattern": "^(.*)$"
        },
        "version": {
          "type": "string",
          "title": "Component Version",
          "description": "The component version. The version should ideally comply with semantic versioning but is not enforced.",
          "default": "",
          "examples": ["9.0.14"],
          "pattern": "^(.*)$"
        },
        "description": {
          "type": "string",
          "title": "Component Description",
          "description": "Specifies a description for the component",
          "default": "",
          "pattern": "^(.*)$"
        },
        "scope": {
          "type": "string",
          "enum": [
            "required",
            "optional",
            "excluded"
          ],
          "title": "Component Scope",
          "description": "Specifies the scope of the component. If scope is not specified, 'required' scope should be assumed by the consumer of the BOM",
          "default": "",
          "pattern": "^(.*)$"
        },
        "hashes": {
          "type": "array",
          "title": "Component Hashes",
          "items": {
            "type": "object",
            "title": "Hash Objects",
            "required": [
              "alg",
              "content"
            ],
            "properties": {
              "alg": {
                "type": "string",
                "$ref": "#/definitions/hash-alg"
              },
              "content": {
                "type": "string",
                "$ref": "#/definitions/hash-content"
              }
            }
          }
        },
        "licenses": {
          "type": "array",
          "title": "Component License(s)",
          "items": {
            "properties": {
              "license": {
                "type": "object",
                "$ref": "#/definitions/license"
              },
              "expression": {
                "type": "string",
                "title": "SPDX License Expression",
                "examples": [
                  "Apache-2.0 AND (MIT OR GPL-2.0-only)",
                  "GPL-3.0-only WITH Classpath-exception-2.0"
                ],
                "pattern": "^(.*)$"
              }
            }
          }
        },
        "copyright": {
          "type": "string",
          "title": "Component Copyright",
          "description": "An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.",
          "examples": ["Acme Inc"],
          "pattern": "^(.*)$"
        },
        "cpe": {
          "type": "string",
          "title": "Component Common Platform Enumeration (CPE)",
          "description": "DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe",
          "examples": ["cpe:2.3:a:acme:component_framework:-:*:*:*:*:*:*:*"],
          "pattern": "^(.*)$"
        },
        "purl": {
          "type": "string",
          "title": "Component Package URL (purl)",
          "default": "",
          "examples": ["pkg:maven/com.acme/tomcat-catalina@9.0.14?packaging=jar"],
          "pattern": "^(.*)$"
        },
        "modified": {
          "type": "boolean",
          "title": "Component Modified From Original",
          "description": "DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original."
        },
        "pedigree": {
          "type": "object",
          "title": "Component Pedigree",
          "description": "Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.",
          "properties": {
            "ancestors": {
              "type": "array",
              "title": "Ancestors",
              "description": "Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.",
              "items": {"$ref": "#/definitions/component"}
            },
            "descendants": {
              "type": "array",
              "title": "Descendants",
              "description": "Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.",
              "items": {"$ref": "#/definitions/component"}
            },
            "variants": {
              "type": "array",
              "title": "Variants",
              "description": "Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.",
              "items": {"$ref": "#/definitions/component"}
            },
            "commits": {
              "type": "array",
              "title": "Commits",
              "description": "A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.",
              "items": {"$ref": "#/definitions/commit"}
            },
            "notes": {
              "type": "string",
              "title": "Notes",
              "description": "Notes, observations, and other non-structured commentary describing the components pedigree.",
              "pattern": "^(.*)$"
            }
          }
        },
        "externalReferences": {
          "type": "array",
          "items": {"$ref": "#/definitions/externalReference"},
          "title": "External References"
        }
      }
    },
    "hash-alg": {
      "type": "string",
      "enum": [
        "MD5",
        "SHA-1",
        "SHA-256",
        "SHA-384",
        "SHA-512",
        "SHA3-256",
        "SHA3-512"
      ],
      "title": "Hash Algorithm",
      "default": "",
      "pattern": "^(.*)$"
    },
    "hash-content": {
      "type": "string",
      "title": "Hash Content (value)",
      "default": "",
      "examples": ["3942447fac867ae5cdb3229b658f4d48"],
      "pattern": "^([a-fA-F0-9]{32}|[a-fA-F0-9]{40}|[a-fA-F0-9]{64}|[a-fA-F0-9]{96}|[a-fA-F0-9]{128})$"
    },
    "license": {
      "type": "object",
      "title": "License Object",
      "oneOf": [
        {
          "required": ["id"]
        },
        {
          "required": ["name"]
        }
      ],
      "properties": {
        "id": {
          "type": "string",
          "title": "License ID (SPDX)",
          "description": "A valid SPDX license ID",
          "default": "",
          "examples": ["Apache-2.0"],
          "pattern": "^(.*)$"
        },
        "name": {
          "type": "string",
          "title": "License Name",
          "description": "If SPDX does not define the license used, this field may be used to provide the license name",
          "default": "",
          "examples": ["Acme Software License"],
          "pattern": "^(.*)$"
        },
        "content": {
          "type": "object",
          "title": "License Content",
          "description": "An optional way to include the textual content of a license",
          "required": ["text"],
          "properties": {
            "text": {
              "type": "string",
              "title": "License Text",
              "description": "Specifies the optional full text of the license",
              "pattern": "^(.*)$"
            },
            "content-type": {
              "type": "string",
              "title": "License Text Content-Type",
              "description": "Specifies the content type of the license text. Defaults to text/plain if not specified.",
              "default": "text/plain",
              "examples": ["text/markdown"],
              "pattern": "^(.*)$"
            },
            "encoding": {
              "type": "string",
              "enum": ["base64"],
              "title": "License Text Encoding",
              "description": "Specifies the optional encoding the license text is represented in",
              "pattern": "^(.*)$"
            }
          }
        },
        "url": {
          "type": "string",
          "title": "License URL",
          "description": "The URL to the license file. If specified, a 'license' externalReference should also be specified for completeness",
          "examples": ["https://www.apache.org/licenses/LICENSE-2.0.txt"],
          "pattern": "^(.*)$"
        }
      }
    },
    "commit": {
      "type": "object",
      "title": "Commit",
      "description": "Specifies an individual commit",
      "properties": {
        "uid": {
          "type": "string",
          "title": "UID",
          "description": "A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.",
          "pattern": "^(.*)$"
        },
        "url": {
          "type": "string",
          "title": "URL",
          "description": "The URL to the commit. This URL will typically point to a commit in a version control system.",
          "format": "iri-reference"
        },
        "author": {
          "type": "string",
          "title": "Author",
          "description": "The author who created the changes in the commit",
          "$ref": "#/definitions/identifiableAction"
        },
        "committer": {
          "type": "string",
          "title": "Committer",
          "description": "The person who committed or pushed the commit",
          "$ref": "#/definitions/identifiableAction"
        },
        "message": {
          "type": "string",
          "title": "Message",
          "description": "The text description of the contents of the commit",
          "pattern": "^(.*)$"
        }
      }
    },
    "identifiableAction": {
      "type": "object",
      "title": "Identifiable Action",
      "description": "Specifies an individual commit",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp",
          "description": "The timestamp in which the action occurred"
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "The name of the individual who performed the action",
          "pattern": "^(.*)$"
        },
        "email": {
          "type": "string",
          "format": "idn-email",
          "title": "E-mail",
          "description": "The email address of the individual who performed the action"
        }
      }
    },
    "externalReference": {
      "type": "object",
      "title": "External Reference",
      "description": "Specifies an individual external reference",
      "required": [
        "url",
        "type"
      ],
      "properties": {
        "url": {
          "type": "string",
          "title": "URL",
          "description": "The URL to the external reference",
          "pattern": "^(.*)$"
        },
        "comment": {
          "type": "string",
          "title": "Comment",
          "description": "An optional comment describing the external reference",
          "pattern": "^(.*)$"
        },
        "type": {
          "type": "string",
          "title": "Type",
          "description": "Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the \"other\" type.",
          "enum": [
            "vcs",
            "issue-tracker",
            "website",
            "advisories",
            "bom",
            "mailing-list",
            "social",
            "chat",
            "documentation",
            "support",
            "distribution",
            "license",
            "build-meta",
            "build-system",
            "other"
          ]
        }
      }
    }
  }
}
